# -*- encoding : utf-8 -*-
# Copyright:: Copyright (c) 2007 Rosetta Stone
# License:: All rights reserved.

module RosettaStone #:nodoc:
  module ActiveLicensing #:nodoc:
    # Note: not all possible exceptions generated by the LS API are explicitly represented here.
    # There is code (see RequestAndResponseHandler#generate_and_raise_exception) to automatically
    # create any nonexistent exception class and raise it if it is received in an LS API response.
    # However, if anybody working in active_licensing clients wants to specifically rescue or
    # recognize a particular exception, it must be explicitly defined here.
    #
    # So in general feel free to define any LS API exception here, especially common/useful ones,
    # but don't fret about making sure we have every single possible exception defined.

    # The standard License Server Exception class from which all other License Server exceptions descend.
    class LicenseServerException < StandardError; end

    # Indicates that the License referenced in the API call could not be found (usually because the identifier passed is incorrect).
    class LicenseNotFound < LicenseServerException; end

    class ParametersException < LicenseServerException; end

    class ArgumentErrorException < LicenseServerException; end

    class BrokenTokenException < LicenseServerException; end

    class ExtendableNotFoundException < LicenseServerException; end

    class ExtensionNotFoundException < LicenseServerException; end

    class ContentRangeNotFoundException < LicenseServerException; end

    class RecordInvalid < LicenseServerException; end

    class AccessDeniedException < LicenseServerException; end

    class BlankResponseException < LicenseServerException; end

    # When you use multicall, you must specify at least one call
    class NoApiCallsSpecified < LicenseServerException; end

    # Indicates that the http connection is misbehaving
    class ConnectionException < LicenseServerException
      attr_reader :original_exception
      def initialize(opts={})
        @original_exception = opts[:original_exception]
      end

      def to_s
        super + " original_exception: (#{@original_exception})"
      end
    end

    # A wrapper Exception from a multi-call. The original exception is available as an attribute.
    class CallException < LicenseServerException
      attr_reader :original_exception, :successful_responses
      def initialize(opts={})
        @original_exception = opts[:original_exception]
        @successful_responses = opts[:successful_responses]
      end

      def to_s
        super + " original_exception: (#{@original_exception})"
      end
    end

    # begin : exceptions that are raised by update_product_identifier api to change language.
    class ProductRightNotFound < LicenseServerException; end

    class ProductNotFound < LicenseServerException; end

    class ProductRightIsNotOnlineSubscription < LicenseServerException; end

    class UnexpectedContentRangesForProductIdentifierUpdate < LicenseServerException; end

    class AvailableProductNotFound < LicenseServerException; end

    class PreexistingProductRight < LicenseServerException; end
    # end : exceptions that are raised by update_product_identifier api to change language.

    # raised by the license locking api
    class LicenseIsLockedException < LicenseServerException; end

    # raised by pooled licenses api
    class ProductPoolNotFound < LicenseServerException; end

    class NoAllocationsRemaining < LicenseServerException; end

    class AllocationNotFound < LicenseServerException; end

    class DeallocationNotAllowed < LicenseServerException; end

    class ProductPoolCannotBeDestroyedWithExistingAllocation < LicenseServerException; end

  end # ActiveLicensing
end # RosettaStone
